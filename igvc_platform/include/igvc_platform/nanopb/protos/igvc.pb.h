/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_IGVC_PB_H_INCLUDED
#define PB_IGVC_PB_H_INCLUDED
#include "../pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* RequestMessage filled out by ros node and sent to the mbed */
typedef struct _RequestMessage { 
    bool has_p_l;
    float p_l; 
    bool has_p_r;
    float p_r; 
    bool has_i_l;
    float i_l; 
    bool has_i_r;
    float i_r; 
    bool has_d_l;
    float d_l; 
    bool has_d_r;
    float d_r; 
    bool has_speed_l;
    float speed_l; 
    bool has_speed_r;
    float speed_r; 
    bool has_kv_l;
    float kv_l; 
    bool has_kv_r;
    float kv_r; 
} RequestMessage;

/* ResponseMessage filled out by mbed (server) and sent to the ros node (client) */
typedef struct _ResponseMessage { 
    bool has_p_l;
    float p_l; 
    bool has_p_r;
    float p_r; 
    bool has_i_l;
    float i_l; 
    bool has_i_r;
    float i_r; 
    bool has_d_l;
    float d_l; 
    bool has_d_r;
    float d_r; 
    bool has_speed_l;
    float speed_l; 
    bool has_speed_r;
    float speed_r; 
    bool has_dt_sec;
    float dt_sec; 
    bool has_voltage;
    float voltage; 
    bool has_estop;
    bool estop; 
    bool has_kv_l;
    float kv_l; 
    bool has_kv_r;
    float kv_r; 
    /* Output sent to motors
 Should range from 0 - 255 (ie. uchar) */
    bool has_left_output;
    uint32_t left_output; 
    bool has_right_output;
    uint32_t right_output; 
    /* Debug messages */
    bool has_desired_speed_l;
    float desired_speed_l; 
    bool has_desired_speed_r;
    float desired_speed_r; 
    pb_callback_t debug; 
} ResponseMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ResponseMessage_init_default             {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define RequestMessage_init_default              {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0.0f, false, 0.0f, false, 0, false, 0}
#define ResponseMessage_init_zero                {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define RequestMessage_init_zero                 {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define RequestMessage_p_l_tag                   1
#define RequestMessage_p_r_tag                   2
#define RequestMessage_i_l_tag                   3
#define RequestMessage_i_r_tag                   4
#define RequestMessage_d_l_tag                   5
#define RequestMessage_d_r_tag                   6
#define RequestMessage_speed_l_tag               7
#define RequestMessage_speed_r_tag               8
#define RequestMessage_kv_l_tag                  9
#define RequestMessage_kv_r_tag                  10
#define ResponseMessage_p_l_tag                  1
#define ResponseMessage_p_r_tag                  2
#define ResponseMessage_i_l_tag                  3
#define ResponseMessage_i_r_tag                  4
#define ResponseMessage_d_l_tag                  5
#define ResponseMessage_d_r_tag                  6
#define ResponseMessage_speed_l_tag              7
#define ResponseMessage_speed_r_tag              8
#define ResponseMessage_dt_sec_tag               9
#define ResponseMessage_voltage_tag              10
#define ResponseMessage_estop_tag                11
#define ResponseMessage_kv_l_tag                 12
#define ResponseMessage_kv_r_tag                 13
#define ResponseMessage_left_output_tag          14
#define ResponseMessage_right_output_tag         15
#define ResponseMessage_desired_speed_l_tag      16
#define ResponseMessage_desired_speed_r_tag      17
#define ResponseMessage_debug_tag                18

/* Struct field encoding specification for nanopb */
#define ResponseMessage_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    p_l,               1) \
X(a, STATIC,   OPTIONAL, FLOAT,    p_r,               2) \
X(a, STATIC,   OPTIONAL, FLOAT,    i_l,               3) \
X(a, STATIC,   OPTIONAL, FLOAT,    i_r,               4) \
X(a, STATIC,   OPTIONAL, FLOAT,    d_l,               5) \
X(a, STATIC,   OPTIONAL, FLOAT,    d_r,               6) \
X(a, STATIC,   OPTIONAL, FLOAT,    speed_l,           7) \
X(a, STATIC,   OPTIONAL, FLOAT,    speed_r,           8) \
X(a, STATIC,   OPTIONAL, FLOAT,    dt_sec,            9) \
X(a, STATIC,   OPTIONAL, FLOAT,    voltage,          10) \
X(a, STATIC,   OPTIONAL, BOOL,     estop,            11) \
X(a, STATIC,   OPTIONAL, FLOAT,    kv_l,             12) \
X(a, STATIC,   OPTIONAL, FLOAT,    kv_r,             13) \
X(a, STATIC,   OPTIONAL, UINT32,   left_output,      14) \
X(a, STATIC,   OPTIONAL, UINT32,   right_output,     15) \
X(a, STATIC,   OPTIONAL, FLOAT,    desired_speed_l,  16) \
X(a, STATIC,   OPTIONAL, FLOAT,    desired_speed_r,  17) \
X(a, CALLBACK, OPTIONAL, STRING,   debug,            18)
#define ResponseMessage_CALLBACK pb_default_field_callback
#define ResponseMessage_DEFAULT NULL

#define RequestMessage_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    p_l,               1) \
X(a, STATIC,   OPTIONAL, FLOAT,    p_r,               2) \
X(a, STATIC,   OPTIONAL, FLOAT,    i_l,               3) \
X(a, STATIC,   OPTIONAL, FLOAT,    i_r,               4) \
X(a, STATIC,   OPTIONAL, FLOAT,    d_l,               5) \
X(a, STATIC,   OPTIONAL, FLOAT,    d_r,               6) \
X(a, STATIC,   OPTIONAL, FLOAT,    speed_l,           7) \
X(a, STATIC,   OPTIONAL, FLOAT,    speed_r,           8) \
X(a, STATIC,   OPTIONAL, FLOAT,    kv_l,              9) \
X(a, STATIC,   OPTIONAL, FLOAT,    kv_r,             10)
#define RequestMessage_CALLBACK NULL
#define RequestMessage_DEFAULT (const pb_byte_t*)"\x3d\x00\x00\x00\x00\x45\x00\x00\x00\x00\x00"

extern const pb_msgdesc_t ResponseMessage_msg;
extern const pb_msgdesc_t RequestMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ResponseMessage_fields &ResponseMessage_msg
#define RequestMessage_fields &RequestMessage_msg

/* Maximum encoded size of messages (where known) */
/* ResponseMessage_size depends on runtime parameters */
#define RequestMessage_size                      50

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
